apply plugin: 'scalaStyle'

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:0.8.2'
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
    }
}

scalaStyle {
    configLocation = "scalastyle_config.xml"
    includeTestSourceDirectory = true
    source = "src/main/scala"
    testSource = "src/test/scala"
    testSource = "src/it/scala"
    verbose = false
}


allprojects {
    project.group = 'com.ramiz'

    apply plugin: 'scala'
    apply plugin: 'idea'
    apply plugin: 'eu.appsatori.fatjar'

    configurations {
        provided
        compile.extendsFrom provided
    }


    sourceSets {
        main {
            scala {
                srcDirs = ['src/main/scala']
            }
        }
        test {
            resources {
                srcDirs = ['src/test/scala','it/scala']
            }
        }
    }

    task testSpec(dependsOn: ['testClasses'], type: JavaExec) {
        main = 'org.scalatest.tools.Runner'
        args = ['-R', 'build/classes/test', '-o']
        classpath = sourceSets.test.runtimeClasspath
    }

    ext {
        scalaVersion = "2.10.6"
        scalaLibVersion = "2.10"
        sparkVersion = "1.5.0"
        scoptVersion = "3.4.0"
        sparkSQLVersion = "1.5.0"
        scalacheckVersion = "1.13.1"
        hadoopClientVersion = "2.6.0"
        scalaTestVersion = "3.0.0-M16-SNAP6"
        sparkTestingBaseVersion = "1.4.0_1.4.1_0.1.2"
        scalaStyleVersion = "0.8.2"
        cryoVersion = "2.24.0"
        jUnitVersion = "4.8.2"
        elasticSearchVersion = "2.3.2"
        scalaLoggingVersion = "2.1.2"
        //logbackVersion = "1.1.2"
        logstashEncoderVersion = "4.5.1"
    }

    dependencies {
        compile "org.scala-lang:scala-library:${scalaVersion}"
        compile "org.apache.spark:spark-core_${scalaLibVersion}:${sparkVersion}"
        compile "org.apache.spark:spark-streaming_${scalaLibVersion}:${sparkVersion}"
        compile "org.apache.spark:spark-streaming-kafka_${scalaLibVersion}:${sparkVersion}"
        compile "com.github.scopt:scopt_${scalaLibVersion}:${scoptVersion}"
        compile "org.apache.spark:spark-sql_${scalaLibVersion}:${sparkSQLVersion}"
        //compile "org.scalastyle:scalastyle_${scalaLibVersion}:${scalaStyleVersion}"
        compile "com.holdenkarau:spark-testing-base_${scalaLibVersion}:${sparkVersion}_${sparkTestingBaseVersion}"
        compile "org.apache.hadoop:hadoop-client:${hadoopClientVersion}"
        compile "org.elasticsearch:elasticsearch-spark_${scalaLibVersion}:${elasticSearchVersion}"
        compile "com.typesafe.scala-logging:scala-logging-slf4j_${scalaLibVersion}:${scalaLoggingVersion}"
        //compile "ch.qos.logback:logback-classic:${logbackVersion}"
        //compile "net.logstash.logback:logstash-logback-encoder:${logstashEncoderVersion}"
        compile "org.apache.logging.log4j:log4j-core:2.0.1"
        compile "org.apache.logging.log4j:log4j-api:2.0.1"
        compile "com.fasterxml.jackson.core:jackson-core:2.4.2"
        compile "com.fasterxml.jackson.core:jackson-databind:2.4.2"
        compile "com.fasterxml.jackson.core:jackson-annotations:2.4.2"


        testCompile "junit:junit:${jUnitVersion}"
        testCompile "org.scalatest:scalatest_${scalaLibVersion}:${scalaTestVersion}"
        testCompile "org.scalacheck:scalacheck_${scalaLibVersion}:${scalacheckVersion}"
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '2.0'
    }

    repositories {
        mavenCentral()
        maven {
            url "https://repository.cloudera.com/artifactory/cloudera-repos/"
        }
    }

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
        sourceCompatibility = "1.7"
        targetCompatibility = "1.7"
    }
}

